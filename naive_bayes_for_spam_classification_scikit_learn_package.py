# -*- coding: utf-8 -*-
"""Naive Bayes for Spam Classification - Scikit Learn Package

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kGCbqmzhJtqRDPbXciJtXn2YbUPXi_5P

## Naive Bayes for Spam Classification - Scikit Learn

The scikit learn library has a Naive Bayes probabilistic model pre-defined!
"""

import numpy as np
import pandas as pd

from sklearn.feature_extraction.text import CountVectorizer # Will help us to generate our vocabulary
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB # Naive Bayes Classifier (why not try random forest?)

from sklearn.metrics import recall_score
from sklearn.metrics import precision_score
from sklearn.metrics import f1_score

DATA_JSON_FILE = '/content/drive/My Drive/SpamData/01_Processing/email-text-data.json'

# Loading our data with pandas!
data = pd.read_json(DATA_JSON_FILE) # Tip: JSON files are good given the web uses Json often! and it is easy to retrieve data

print('Data Frame Shape:', data.shape)
data.tail()

# Sorting by our index
data.sort_index(inplace=True)

# Generating our Vocabulary 

# This function will generate automatically a vocabulary using english language
vectorizer = CountVectorizer(stop_words='english')

# The vectorizer will extract all features from our Messages 
all_features = vectorizer.fit_transform(data.Message)

all_features.shape
# 5797 >> Rows
# 102694 >> Columns = Tokens in our e-mails (individual words)

# Vocabulary generated by Scikit Learn
vectorizer.vocabulary_

# Spliting and Shuffle our Test data

X_train, X_test, y_train, y_test = train_test_split(all_features, # Features
                                                    data.Category, # Labels 
                                                    test_size=0.3, # 30% for testing and 70% for training
                                                    random_state= 88) # Shuffling (everyday i'm shuffling....)

print('X train shape:', X_train.shape)
print('X test shape:', X_test.shape)

# Creating the classifier and training it!
classifier = MultinomialNB()

classifier.fit(X_train, y_train)

# Calculating Metrics

nr_correct = (y_test == classifier.predict(X_test)).sum()
nr_incorrect = y_test.size - nr_correct

print(f'{nr_correct} documents classified correctly')
print(f'{nr_incorrect} documents classified incorrectly')

accuracy = nr_correct / (nr_correct + nr_incorrect)
print(f'Model Accuracy is: {accuracy:.2%}')

# You can also calculate using 'SCORE' Method
classifier.score(X_test, y_test)

# Recall
recall = recall_score(y_test, classifier.predict(X_test))
print('Recall Score: {:.2%}'.format(recall))

# Precision
precision = precision_score(y_test, classifier.predict(X_test))
print('Precision Score: {:.2%}'.format(precision))

# F1 Score
f_score = 2 * (precision * recall) / (precision + recall)
print('F1 Score: {:.2%}'.format(f_score))

# Testing with new examples in order to check if our new e-mails are spammy or not

example = ['Get viagra for free now',
           'Need a mortgage?  Reply to arrange a call with a specialist and get a quote',
           'Could you please help me with the project tommorrow?',
           'Hey man, How about a game of golf tomorrow? Please let me know',
           'Ski jumping is a winter sport in which competitors aim to achieve the longest jump after descending from a specially designed ramp on their skis. Along with jump length, competitor\'s style and other factors affect the final score. Ski jumping was first contested in Norway in the late 19th century, and later spread through Europe and North America in the early 20th century. Along with cross-country skiing, it constitutes the traditional group of Nordic skiing disciplines.']

# 1st let's process our new emails
doc_term_matrix = vectorizer.transform(example)

# Take the classifier
classifier.predict(doc_term_matrix)

